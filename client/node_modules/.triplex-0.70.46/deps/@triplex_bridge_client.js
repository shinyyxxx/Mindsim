import "./chunk-G3PMV62Z.js";

// ../../../Users/Admin/.vscode/extensions/trytriplex.triplex-vsce-0.2.55/node_modules/@triplex/bridge/dist/compose.js
function compose(o2) {
  return () => {
    o2.forEach((o3) => o3());
  };
}

// ../../../Users/Admin/.vscode/extensions/trytriplex.triplex-vsce-0.2.55/node_modules/@triplex/bridge/dist/keyboard.js
function createKeyboardEventForwarder(e, { capture: t = false, predicate: o2 = () => true } = {}) {
  function n(t2) {
    return (n2) => {
      if (n2.target === n2.currentTarget) return;
      let r2 = o2(n2);
      r2 && ("stop-propagation" === r2 && n2.stopPropagation(), e(t2, { altKey: n2.altKey, code: n2.code, ctrlKey: n2.ctrlKey, isComposing: n2.isComposing, key: n2.key, keyCode: n2.keyCode, location: n2.location, metaKey: n2.metaKey, repeat: n2.repeat, shiftKey: n2.shiftKey }));
    };
  }
  let r = n("keydown"), i = n("keyup");
  return window.addEventListener("keydown", r, { capture: t }), window.addEventListener("keyup", i, { capture: t }), () => {
    window.removeEventListener("keydown", r, { capture: t }), window.removeEventListener("keyup", i, { capture: t });
  };
}

// ../../../Users/Admin/.vscode/extensions/trytriplex.triplex-vsce-0.2.55/node_modules/@triplex/bridge/dist/client.js
function broadcastForwardedKeyboardEvents() {
  return compose([on("keydown", (e) => {
    window.dispatchEvent(new KeyboardEvent("keydown", e));
  }), on("keyup", (e) => {
    window.dispatchEvent(new KeyboardEvent("keyup", e));
  })]);
}
function listenForStateChanges() {
  on("request-state-change", (e) => {
    window.triplex.env.state = e.state;
  });
}
function forwardKeyboardEvents() {
  return createKeyboardEventForwarder((e, t) => {
    send(e, t);
  }, { capture: true, predicate: (e) => ("play" !== window.triplex.env.state || "p" === e.key.toLowerCase() && (!!e.metaKey || !!e.ctrlKey) && !e.altKey && !!e.shiftKey) && "stop-propagation" });
}
function on(e, t) {
  var _a;
  "webxr" === window.triplex.env.mode && ((_a = import.meta.hot) == null ? void 0 : _a.on(`triplex:${e}`, t));
  let n = async (n2) => {
    if ("object" == typeof n2.data && n2.data.eventName === e) {
      let r = await t(n2.data.data);
      void 0 !== r ? o(e, r) : false;
    }
  };
  return window.addEventListener("message", n, false), () => {
    var _a2;
    window.removeEventListener("message", n, false), "webxr" === window.triplex.env.mode && ((_a2 = import.meta.hot) == null ? void 0 : _a2.off(`triplex:${e}`, t));
  };
}
function send(e, t, o2 = false) {
  var _a;
  return ("webxr" === window.triplex.env.mode ? ((_a = import.meta.hot) == null ? void 0 : _a.send(`triplex:${e}`, t), window.postMessage({ data: t, eventName: e }, "*")) : e.startsWith("self:") ? window.postMessage({ data: t, eventName: e }, "*") : window.parent.postMessage({ data: t, eventName: e }, "*"), o2) ? new Promise((t2) => {
    let o3 = on(`${e}Response`, (e2) => {
      t2(e2), o3();
    });
  }) : Promise.resolve(void 0);
}
function o(e, t) {
  window.parent.postMessage({ data: t, eventName: `${e}Response` }, "*");
}
function init({ RendererElement: e }) {
  window.SceneObject = e;
}
export {
  broadcastForwardedKeyboardEvents,
  compose,
  forwardKeyboardEvents,
  init,
  listenForStateChanges,
  on,
  send
};
//# sourceMappingURL=@triplex_bridge_client.js.map
